/**
 * * notice this file create by nemo
 * * like it! Give me a star ðŸŒŸ https://github.com/diveDylan/nemo
 */
import qs from 'qs'

type RequestInitWithoutBodyInit = Omit<RequestInit, 'body'>

export interface Options extends RequestInitWithoutBodyInit, Record<string, any> {
  body?: Record<string, any>
  formData?: Record<string, any>
  query?: Record<string, any>
}

export function getUrl(url: string, query: Options['query']) {
  return query ? url + '?' + qs.stringify(query) : url
}

export function isString(value: any): value is string {
  return typeof value === 'string'
}

export function isBlob(value: any): value is Blob {
  return value instanceof Blob
}

export function getHeaders(options:Options ): Headers {
  const headers = new Headers({
    Accept: 'application/json',
    ...options.headers
  })
  if (options.body) {
    if (isBlob(options.body)) {
      headers.append('Content-Type', 'application/octet-stream')
    } else if (isString(options.body)) {
      headers.append('Content-Type', 'text/plain')
    } else {
      headers.append('Content-Type', 'application/json')
    }
  }
  return headers
}

export function getFormData(data: Record<string, any>): FormData {
  let formData = new FormData()
  Object.keys(data).forEach(key => {
    formData.append(key, data[key])
  })
  return formData
}


export function getRequestBody(options: Options): BodyInit | undefined {
  if (options.body) {
    return isBlob(options.body) || isString(options.body) ? options.body : JSON.stringify(options.body)
  }
  if (options.formData) {
    return getFormData(options.formData)
  }
  return undefined
}
